#include <chrono>
#include <iostream>

#include "graph.hpp"

int main() {
  try {
    // instantiates a simple connected graph with 20 nodes represented through
    // adjacency list

    std::unordered_map<int, std::vector<int>> adjList{
        {0, {1, 2}},       {1, {0, 2, 3}},     {2, {0, 1, 3}},
        {3, {1, 2, 4, 5}}, {4, {3, 5, 6}},     {5, {4, 6, 3}},
        {6, {4, 5, 7, 9}}, {7, {6, 8}},        {8, {7, 9, 11}},
        {9, {6, 8, 10}},   {10, {9, 11, 13}},  {11, {8, 10, 12}},
        {12, {11, 13}},    {13, {12, 10, 14}}, {14, {13, 15}},
        {15, {14, 16}},    {16, {15, 17, 19}}, {17, {16, 18}},
        {18, {17, 19}},    {19, {18, 16}}};

    Graph graph{adjList};

    // applies traversal algorithms bfs and dfs (starting from random node) and
    // times them:
    std::random_device rd;
    auto const seed{rd()};
    std::default_random_engine eng(seed);
    // transforms the random unsigned int generated by gen into a random int
    // in the closed interval [a,b]
    std::uniform_int_distribution<> randomNeighbor(0, 19);
    int start{randomNeighbor(eng)};
    std::vector<int> bfs_traversal{};
    auto t1_bfs{std::chrono::high_resolution_clock::now()};
    graph.bfs(start, bfs_traversal);
    auto t2_bfs{std::chrono::high_resolution_clock::now()};
    std::vector<int> dfs_traversal{};
    auto t1_dfs{std::chrono::high_resolution_clock::now()};
    graph.dfs(start, dfs_traversal);
    auto t2_dfs{std::chrono::high_resolution_clock::now()};

    // printing the traversals
    std::cout << "\nBFS traversal:\n";
    printTraversal(bfs_traversal);
    std::cout << "\n\nDFS traversal:\n";
    printTraversal(dfs_traversal);

    // printing execution times
    auto duration_bfs =
        std::chrono::duration_cast<std::chrono::microseconds>(t2_bfs - t1_bfs);
    std::cout << "\n\nBFS Execution time: " << duration_bfs.count()
              << " microseconds";
    auto duration_dfs =
        std::chrono::duration_cast<std::chrono::microseconds>(t2_dfs - t1_dfs);
    std::cout << "\n\nDFS Execution time: " << duration_dfs.count()
              << " microseconds\n\n";

  } catch (std::exception const& err) {
    std::cerr << "An error occurred: " << err.what() << '\n';
    return EXIT_FAILURE;
  } catch (...) {
    std::cerr << "An unknown error occurred\n";
    return EXIT_FAILURE;
  }
}